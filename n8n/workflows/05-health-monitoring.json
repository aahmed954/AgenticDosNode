{
  "name": "Infrastructure Health Monitoring - Service Checks & Alerts",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "*/5 * * * *"
            }
          ]
        }
      },
      "id": "health-check-trigger",
      "name": "Health Check Schedule",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        260,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Define services to monitor\nconst services = [\n  {\n    name: 'n8n',\n    type: 'http',\n    url: 'http://localhost:5678/healthz',\n    timeout: 5000,\n    critical: true,\n    expectedStatus: [200],\n    expectedContent: null\n  },\n  {\n    name: 'claude-proxy',\n    type: 'http', \n    url: `${process.env.CLAUDE_PROXY_URL}/health`,\n    timeout: 10000,\n    critical: true,\n    expectedStatus: [200],\n    expectedContent: 'healthy'\n  },\n  {\n    name: 'qdrant-vector-db',\n    type: 'http',\n    url: `${process.env.VECTOR_DB_URL}/collections`,\n    timeout: 5000,\n    critical: true,\n    expectedStatus: [200],\n    expectedContent: null\n  },\n  {\n    name: 'postgres-db',\n    type: 'tcp',\n    host: 'postgres-n8n',\n    port: 5432,\n    timeout: 3000,\n    critical: true\n  },\n  {\n    name: 'redis-cache',\n    type: 'tcp',\n    host: 'redis-n8n',\n    port: 6379,\n    timeout: 3000,\n    critical: false\n  },\n  {\n    name: 'prometheus',\n    type: 'http',\n    url: 'http://prometheus:9090/-/healthy',\n    timeout: 5000,\n    critical: false,\n    expectedStatus: [200]\n  },\n  {\n    name: 'grafana',\n    type: 'http',\n    url: 'http://grafana:3000/api/health',\n    timeout: 5000,\n    critical: false,\n    expectedStatus: [200]\n  },\n  {\n    name: 'sentence-transformers',\n    type: 'http',\n    url: 'http://sentence-transformers:8080/health',\n    timeout: 10000,\n    critical: false,\n    expectedStatus: [200]\n  }\n];\n\nreturn {\n  services,\n  checkId: `health_${Date.now()}`,\n  timestamp: new Date().toISOString(),\n  totalServices: services.length,\n  criticalServices: services.filter(s => s.critical).length\n};"
      },
      "id": "define-services",
      "name": "Define Services to Monitor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        300
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split-services",
      "name": "Split Services",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        700,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.type }}",
              "rightValue": "http",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "is-http-check",
      "name": "Is HTTP Check?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        920,
        200
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.url }}",
        "options": {
          "timeout": "={{ $json.timeout }}",\n          "response": {\n            "response": {\n              "fullResponse": true,\n              "responseFormat": "json"\n            }\n          }\n        }\n      },\n      "id": "http-health-check",\n      "name": "HTTP Health Check",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4.1,\n      "position": [\n        1140,\n        100\n      ],\n      "onError": "continueRegularOutput"\n    },\n    {\n      "parameters": {\n        "jsCode": "// Perform TCP health check using Node.js net module\nconst net = require('net');\nconst service = $json;\n\nreturn new Promise((resolve) => {\n  const startTime = Date.now();\n  const socket = new net.Socket();\n  \n  socket.setTimeout(service.timeout);\n  \n  socket.on('connect', () => {\n    const responseTime = Date.now() - startTime;\n    socket.destroy();\n    resolve({\n      service: service.name,\n      status: 'healthy',\n      responseTime,\n      timestamp: new Date().toISOString(),\n      details: `TCP connection successful to ${service.host}:${service.port}`\n    });\n  });\n  \n  socket.on('timeout', () => {\n    socket.destroy();\n    resolve({\n      service: service.name,\n      status: 'unhealthy',\n      responseTime: service.timeout,\n      timestamp: new Date().toISOString(),\n      error: `Connection timeout after ${service.timeout}ms`,\n      details: `TCP connection to ${service.host}:${service.port} timed out`\n    });\n  });\n  \n  socket.on('error', (err) => {\n    const responseTime = Date.now() - startTime;\n    socket.destroy();\n    resolve({\n      service: service.name,\n      status: 'unhealthy',\n      responseTime,\n      timestamp: new Date().toISOString(),\n      error: err.message,\n      details: `TCP connection to ${service.host}:${service.port} failed`\n    });\n  });\n  \n  socket.connect(service.port, service.host);\n});"
      },\n      "id": "tcp-health-check",\n      "name": "TCP Health Check",\n      "type": "n8n-nodes-base.code",\n      "typeVersion": 2,\n      "position": [\n        1140,\n        300\n      ]\n    },\n    {\n      "parameters": {\n        "jsCode": "// Process HTTP health check results\nconst service = $node[\"Split Services\"].json;\nconst response = $json;\n\nconst startTime = Date.now();\nlet status = 'unhealthy';\nlet details = '';\nlet error = null;\n\ntry {\n  // Check if we got a response\n  if (response && response.statusCode) {\n    const statusCode = response.statusCode;\n    const body = response.body;\n    const responseTime = response.headers ? parseInt(response.headers['x-response-time']) || 0 : 0;\n    \n    // Check status code\n    if (service.expectedStatus.includes(statusCode)) {\n      status = 'healthy';\n      details = `HTTP ${statusCode} response received`;\n      \n      // Check content if specified\n      if (service.expectedContent) {\n        if (typeof body === 'string' && !body.toLowerCase().includes(service.expectedContent.toLowerCase())) {\n          status = 'unhealthy';\n          details = `HTTP ${statusCode} but unexpected content`;\n          error = `Expected content '${service.expectedContent}' not found`;\n        } else if (typeof body === 'object' && !JSON.stringify(body).includes(service.expectedContent)) {\n          status = 'unhealthy';\n          details = `HTTP ${statusCode} but unexpected content`;\n          error = `Expected content '${service.expectedContent}' not found in JSON response`;\n        }\n      }\n    } else {\n      status = 'unhealthy';\n      details = `HTTP ${statusCode} - unexpected status code`;\n      error = `Expected status codes: ${service.expectedStatus.join(', ')}`;\n    }\n  } else {\n    status = 'unhealthy';\n    details = 'No response received';\n    error = 'HTTP request failed - no response data';\n  }\n} catch (err) {\n  status = 'unhealthy';\n  details = 'HTTP request error';\n  error = err.message || 'Unknown HTTP error';\n}\n\nreturn {\n  service: service.name,\n  type: service.type,\n  critical: service.critical,\n  status,\n  responseTime: startTime,\n  timestamp: new Date().toISOString(),\n  details,\n  error,\n  url: service.url,\n  checkData: {\n    expectedStatus: service.expectedStatus,\n    expectedContent: service.expectedContent,\n    timeout: service.timeout\n  }\n};"
      },\n      "id": "process-http-result",\n      "name": "Process HTTP Result",\n      "type": "n8n-nodes-base.code",\n      "typeVersion": 2,\n      "position": [\n        1360,\n        100\n      ]\n    },\n    {\n      "parameters": {\n        "jsCode": "// Aggregate all health check results\nconst allResults = $input.all();\nconst checkId = $node[\"Define Services to Monitor\"].json.checkId;\nconst timestamp = $node[\"Define Services to Monitor\"].json.timestamp;\n\n// Process results\nconst healthyServices = [];\nconst unhealthyServices = [];\nconst criticalFailures = [];\nconst warnings = [];\n\nallResults.forEach(result => {\n  const data = result.json;\n  \n  if (data.status === 'healthy') {\n    healthyServices.push(data);\n  } else {\n    unhealthyServices.push(data);\n    \n    if (data.critical) {\n      criticalFailures.push(data);\n    } else {\n      warnings.push(data);\n    }\n  }\n});\n\n// Calculate health score\nconst totalServices = allResults.length;\nconst healthyCount = healthyServices.length;\nconst healthScore = Math.round((healthyCount / totalServices) * 100);\n\n// Determine overall status\nlet overallStatus = 'healthy';\nif (criticalFailures.length > 0) {\n  overallStatus = 'critical';\n} else if (unhealthyServices.length > 0) {\n  overallStatus = 'warning';\n}\n\n// Calculate average response time\nconst avgResponseTime = Math.round(\n  allResults.reduce((sum, result) => sum + (result.json.responseTime || 0), 0) / totalServices\n);\n\n// Generate summary\nconst summary = {\n  checkId,\n  timestamp,\n  overallStatus,\n  healthScore,\n  statistics: {\n    total: totalServices,\n    healthy: healthyCount,\n    unhealthy: unhealthyServices.length,\n    critical: criticalFailures.length,\n    warnings: warnings.length,\n    avgResponseTime\n  },\n  services: {\n    healthy: healthyServices,\n    unhealthy: unhealthyServices,\n    critical: criticalFailures,\n    warnings\n  }\n};\n\nreturn summary;"
      },\n      "id": "aggregate-results",\n      "name": "Aggregate Health Results",\n      "type": "n8n-nodes-base.code",\n      "typeVersion": 2,\n      "position": [\n        1580,\n        200\n      ]\n    },\n    {\n      "parameters": {\n        "operation": "executeQuery",\n        "query": "INSERT INTO health_checks (check_id, timestamp, overall_status, health_score, total_services, healthy_services, unhealthy_services, critical_failures, avg_response_time, details) VALUES ('{{ $json.checkId }}', '{{ $json.timestamp }}', '{{ $json.overallStatus }}', {{ $json.healthScore }}, {{ $json.statistics.total }}, {{ $json.statistics.healthy }}, {{ $json.statistics.unhealthy }}, {{ $json.statistics.critical }}, {{ $json.statistics.avgResponseTime }}, '{{ JSON.stringify($json.services).replace(/'/g, \"''\") }}');",\n        "additionalFields": {}\n      },\n      "id": "store-health-data",\n      "name": "Store Health Data",\n      "type": "n8n-nodes-base.postgres",\n      "typeVersion": 2.4,\n      "position": [\n        1800,\n        100\n      ],\n      "credentials": {\n        "postgres": {\n          "id": "postgres-creds",\n          "name": "PostgreSQL Credentials"\n        }\n      }\n    },\n    {\n      "parameters": {\n        "conditions": {\n          "options": {\n            "caseSensitive": true,\n            "leftValue": "",\n            "typeValidation": "strict"\n          },\n          "conditions": [\n            {\n              "leftValue": "={{ $json.overallStatus }}",\n              "rightValue": "critical",\n              "operator": {\n                "type": "string",\n                "operation": "equals"\n              }\n            }\n          ],\n          "combinator": "and"\n        }\n      },\n      "id": "check-critical-alert",\n      "name": "Critical Alert Needed?",\n      "type": "n8n-nodes-base.if",\n      "typeVersion": 2,\n      "position": [\n        1800,\n        300\n      ]\n    },\n    {\n      "parameters": {\n        "method": "POST",\n        "url": "={{ $env.SLACK_WEBHOOK_URL }}",\n        "sendBody": true,\n        "bodyParameters": {\n          "parameters": []\n        },\n        "jsonBody": "={{ JSON.stringify({\n  text: \"🚨 CRITICAL: Infrastructure Health Alert\",\n  blocks: [\n    {\n      type: 'header',\n      text: {\n        type: 'plain_text',\n        text: '🚨 CRITICAL INFRASTRUCTURE ALERT'\n      }\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*Overall Status:* ${$json.overallStatus.toUpperCase()}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Health Score:* ${$json.healthScore}%`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Critical Failures:* ${$json.statistics.critical}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*Timestamp:* ${new Date($json.timestamp).toLocaleString()}`\n        }\n      ]\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*Failed Critical Services:*\\n${$json.services.critical.map(service => \n          `• *${service.service}*: ${service.error || service.details}\\n  Response Time: ${service.responseTime}ms`\n        ).join('\\n')}`\n      }\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*Healthy Services:* ${$json.statistics.healthy}/${$json.statistics.total}\\n*Average Response Time:* ${$json.statistics.avgResponseTime}ms`\n      }\n    },\n    {\n      type: 'context',\n      elements: [\n        {\n          type: 'mrkdwn',\n          text: `Check ID: ${$json.checkId} | Automated Health Monitoring`\n        }\n      ]\n    }\n  ]\n}) }}"
      },\n      "id": "send-critical-alert",\n      "name": "Send Critical Alert",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4.1,\n      "position": [\n        2020,\n        400\n      ]\n    },\n    {\n      "parameters": {\n        "conditions": {\n          "options": {\n            "caseSensitive": true,\n            "leftValue": "",\n            "typeValidation": "strict"\n          },\n          "conditions": [\n            {\n              "leftValue": "={{ $json.overallStatus }}",\n              "rightValue": "warning",\n              "operator": {\n                "type": "string",\n                "operation": "equals"\n              }\n            }\n          ],\n          "combinator": "and"\n        }\n      },\n      "id": "check-warning-alert",\n      "name": "Warning Alert Needed?",\n      "type": "n8n-nodes-base.if",\n      "typeVersion": 2,\n      "position": [\n        1800,\n        500\n      ]\n    },\n    {\n      "parameters": {\n        "method": "POST",\n        "url": "={{ $env.SLACK_WEBHOOK_URL }}",\n        "sendBody": true,\n        "bodyParameters": {\n          "parameters": []\n        },\n        "jsonBody": "={{ JSON.stringify({\n  text: \"⚠️ Infrastructure Warning\",\n  blocks: [\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*⚠️ Infrastructure Warning*\\n\\n*Health Score:* ${$json.healthScore}%\\n*Issues Detected:* ${$json.statistics.warnings} non-critical services`\n      }\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*Affected Services:*\\n${$json.services.warnings.map(service => \n          `• ${service.service}: ${service.error || service.details}`\n        ).join('\\n')}`\n      }\n    },\n    {\n      type: 'context',\n      elements: [\n        {\n          type: 'mrkdwn',\n          text: `${new Date($json.timestamp).toLocaleString()} | Check ID: ${$json.checkId}`\n        }\n      ]\n    }\n  ]\n}) }}"
      },\n      "id": "send-warning-alert",\n      "name": "Send Warning Alert",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4.1,\n      "position": [\n        2020,\n        600\n      ]\n    },\n    {\n      "parameters": {\n        "operation": "get",\n        "propertyName": "lastHealthStatus",\n        "key": "infrastructure-health-status"\n      },\n      "id": "get-last-status",\n      "name": "Get Last Health Status",\n      "type": "n8n-nodes-base.redis",\n      "typeVersion": 1,\n      "position": [\n        2020,\n        100\n      ],\n      "credentials": {\n        "redis": {\n          "id": "redis-creds",\n          "name": "Redis Credentials"\n        }\n      }\n    },\n    {\n      "parameters": {\n        "operation": "set",\n        "key": "infrastructure-health-status",\n        "value": "={{ JSON.stringify({\n  status: $node[\"Aggregate Health Results\"].json.overallStatus,\n  healthScore: $node[\"Aggregate Health Results\"].json.healthScore,\n  timestamp: $node[\"Aggregate Health Results\"].json.timestamp,\n  checkId: $node[\"Aggregate Health Results\"].json.checkId\n}) }}",\n        "options": {\n          "ttl": 300\n        }\n      },\n      "id": "update-status-cache",\n      "name": "Update Status Cache",\n      "type": "n8n-nodes-base.redis",\n      "typeVersion": 1,\n      "position": [\n        2020,\n        200\n      ],\n      "credentials": {\n        "redis": {\n          "id": "redis-creds",\n          "name": "Redis Credentials"\n        }\n      }\n    },\n    {\n      "parameters": {\n        "jsCode": "// Check for status changes and recovery\nconst currentStatus = $node[\"Aggregate Health Results\"].json;\nconst lastStatusData = $node[\"Get Last Health Status\"].json.lastHealthStatus;\n\nlet lastStatus = null;\nif (lastStatusData && lastStatusData !== 'nil') {\n  try {\n    lastStatus = JSON.parse(lastStatusData);\n  } catch (e) {\n    console.warn('Could not parse last status:', e.message);\n  }\n}\n\nconst statusChanged = lastStatus && lastStatus.status !== currentStatus.overallStatus;\nconst isRecovery = lastStatus && \n  (lastStatus.status === 'critical' || lastStatus.status === 'warning') && \n  currentStatus.overallStatus === 'healthy';\n\nconst isDegradation = lastStatus && \n  lastStatus.status === 'healthy' && \n  (currentStatus.overallStatus === 'critical' || currentStatus.overallStatus === 'warning');\n\nreturn {\n  ...currentStatus,\n  statusChange: {\n    changed: statusChanged,\n    isRecovery,\n    isDegradation,\n    previousStatus: lastStatus?.status || 'unknown',\n    currentStatus: currentStatus.overallStatus,\n    previousHealthScore: lastStatus?.healthScore || 0,\n    healthScoreChange: currentStatus.healthScore - (lastStatus?.healthScore || 0)\n  }\n};"
      },\n      "id": "check-status-change",\n      "name": "Check Status Changes",\n      "type": "n8n-nodes-base.code",\n      "typeVersion": 2,\n      "position": [\n        2240,\n        150\n      ]\n    },\n    {\n      "parameters": {\n        "conditions": {\n          "options": {\n            "caseSensitive": true,\n            "leftValue": "",\n            "typeValidation": "strict"\n          },\n          "conditions": [\n            {\n              "leftValue": "={{ $json.statusChange.isRecovery }}",\n              "rightValue": true,\n              "operator": {\n                "type": "boolean",\n                "operation": "equal"\n              }\n            }\n          ],\n          "combinator": "and"\n        }\n      },\n      "id": "check-recovery",\n      "name": "Is Recovery?",\n      "type": "n8n-nodes-base.if",\n      "typeVersion": 2,\n      "position": [\n        2460,\n        150\n      ]\n    },\n    {\n      "parameters": {\n        "method": "POST",\n        "url": "={{ $env.SLACK_WEBHOOK_URL }}",\n        "sendBody": true,\n        "bodyParameters": {\n          "parameters": []\n        },\n        "jsonBody": "={{ JSON.stringify({\n  text: \"✅ Infrastructure Recovery\",\n  blocks: [\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*✅ Infrastructure Recovered*\\n\\n*Status Change:* ${$json.statusChange.previousStatus} → ${$json.statusChange.currentStatus}\\n*Health Score:* ${$json.statusChange.previousHealthScore}% → ${$json.healthScore}% (${$json.statusChange.healthScoreChange >= 0 ? '+' : ''}${$json.statusChange.healthScoreChange}%)`\n      }\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*Current Status:*\\n• Healthy Services: ${$json.statistics.healthy}/${$json.statistics.total}\\n• Average Response Time: ${$json.statistics.avgResponseTime}ms`\n      }\n    },\n    {\n      type: 'context',\n      elements: [\n        {\n          type: 'mrkdwn',\n          text: `Recovery detected at ${new Date($json.timestamp).toLocaleString()}`\n        }\n      ]\n    }\n  ]\n}) }}"
      },\n      "id": "send-recovery-notification",\n      "name": "Send Recovery Notification",\n      "type": "n8n-nodes-base.httpRequest",\n      "typeVersion": 4.1,\n      "position": [\n        2680,\n        250\n      ]\n    }\n  ],\n  "pinData": {},\n  "connections": {\n    "Health Check Schedule": {\n      "main": [\n        [\n          {\n            "node": "Define Services to Monitor",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Define Services to Monitor": {\n      "main": [\n        [\n          {\n            "node": "Split Services",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Split Services": {\n      "main": [\n        [\n          {\n            "node": "Is HTTP Check?",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Is HTTP Check?": {\n      "main": [\n        [\n          {\n            "node": "HTTP Health Check",\n            "type": "main",\n            "index": 0\n          }\n        ],\n        [\n          {\n            "node": "TCP Health Check",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "HTTP Health Check": {\n      "main": [\n        [\n          {\n            "node": "Process HTTP Result",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "TCP Health Check": {\n      "main": [\n        [\n          {\n            "node": "Split Services",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Process HTTP Result": {\n      "main": [\n        [\n          {\n            "node": "Split Services",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Aggregate Health Results": {\n      "main": [\n        [\n          {\n            "node": "Store Health Data",\n            "type": "main",\n            "index": 0\n          },\n          {\n            "node": "Critical Alert Needed?",\n            "type": "main",\n            "index": 0\n          },\n          {\n            "node": "Warning Alert Needed?",\n            "type": "main",\n            "index": 0\n          },\n          {\n            "node": "Get Last Health Status",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Critical Alert Needed?": {\n      "main": [\n        [\n          {\n            "node": "Send Critical Alert",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Warning Alert Needed?": {\n      "main": [\n        [\n          {\n            "node": "Send Warning Alert",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Get Last Health Status": {\n      "main": [\n        [\n          {\n            "node": "Update Status Cache",\n            "type": "main",\n            "index": 0\n          },\n          {\n            "node": "Check Status Changes",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Check Status Changes": {\n      "main": [\n        [\n          {\n            "node": "Is Recovery?",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "Is Recovery?": {\n      "main": [\n        [\n          {\n            "node": "Send Recovery Notification",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    }\n  },\n  "active": true,\n  "settings": {\n    "executionOrder": "v1"\n  },\n  "versionId": "1",\n  "meta": {\n    "templateCredsSetupCompleted": true\n  },\n  "id": "health-monitoring-workflow",\n  "tags": [\n    {\n      "createdAt": "2024-01-01T00:00:00.000Z",\n      "updatedAt": "2024-01-01T00:00:00.000Z",\n      "id": "infrastructure",\n      "name": "Infrastructure"\n    },\n    {\n      "createdAt": "2024-01-01T00:00:00.000Z",\n      "updatedAt": "2024-01-01T00:00:00.000Z",\n      "id": "monitoring",\n      "name": "Monitoring"\n    }\n  ]\n}