# Nginx configuration for Claude Code Proxy routing
# This config is included in the main WAF proxy for secure access

# Upstream for ccproxy
upstream ccproxy_backend {
    server ccproxy-secure:8000 max_fails=3 fail_timeout=30s;
}

# Rate limiting zones for ccproxy
limit_req_zone $binary_remote_addr zone=ccproxy_login:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=ccproxy_api:10m rate=60r/m;

# Claude Code Proxy API
server {
    listen 443 ssl http2;
    server_name ccproxy.local.mesh;

    # SSL configuration (inherit from main config)
    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'" always;

    # Request size limits
    client_max_body_size 1m;
    client_body_timeout 30s;
    client_header_timeout 30s;

    # Proxy timeouts
    proxy_connect_timeout 10s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;

    # Health check endpoint (no auth required)
    location = /health {
        proxy_pass http://ccproxy_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # No rate limiting for health checks
        access_log off;
    }

    # Metrics endpoint (restricted access)
    location = /metrics {
        # Allow only from monitoring networks
        allow 172.28.0.0/16;  # ai_isolated network
        allow 127.0.0.1;      # localhost
        deny all;

        proxy_pass http://ccproxy_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        access_log off;
    }

    # Main API endpoints
    location /v1/ {
        # Rate limiting
        limit_req zone=ccproxy_api burst=20 nodelay;

        # ModSecurity
        modsecurity on;
        modsecurity_rules_file /etc/modsecurity.d/ccproxy-rules.conf;

        # Authentication validation
        # Add custom auth validation here if needed

        # Proxy to ccproxy
        proxy_pass http://ccproxy_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Preserve authentication headers
        proxy_pass_request_headers on;

        # Buffer settings for streaming
        proxy_buffering off;
        proxy_cache off;

        # Handle WebSocket connections if needed
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Custom headers
        proxy_set_header X-CCProxy-Version "1.0.0";
        proxy_set_header X-Request-ID $request_id;
    }

    # Stats endpoint (authenticated access)
    location = /stats {
        # Rate limiting
        limit_req zone=ccproxy_login burst=5 nodelay;

        # Add authentication check here
        # auth_basic "CCProxy Stats";
        # auth_basic_user_file /etc/nginx/.htpasswd;

        proxy_pass http://ccproxy_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Block all other endpoints
    location / {
        return 404;
    }

    # Security: Hide server version
    server_tokens off;

    # Logging
    error_log /var/log/nginx/ccproxy_error.log warn;
    access_log /var/log/nginx/ccproxy_access.log combined;
}

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name ccproxy.local.mesh;
    return 301 https://$server_name$request_uri;
}